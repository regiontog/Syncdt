#!/bin/bash

function sync {
  [ ! -f "$sync_file" ] && error "---> No $sync_file file in current directory" false && exit 1

  for line in $(cat $sync_file); do
    [ ${line:0:1} = '!' ] && exclude ${line:1}
  done

  msg "Copying files" false
  for line in $(cat $sync_file); do
    [ ${line:0:1} = '!' ] && continue
    [ ${line:0:1} = '#' ] && continue
    eval line=$line

    copy $line && echo $line "sync'd" || error "$line FAILED to sync" false
  done
}

function copy {
  for file in $(find $1 -type f | grep -Ev "(${exclude_list:1})"); do
    local currtarget=$target${file##$rootdir}
    mkdir -p $(dirname $currtarget) && cp -u $file $currtarget || return 1
  done
}

function commit {
  msg "Committing to $branch_name" true

  inFile .git/info/exclude $sync_file || echo "$sync_file" >> .git/info/exclude && msg "Added $sync_file to .git/info/exclude"

  git add -A || exit 1
  git commit || msg "Nothing to commit" false
}

function push {
  msg "Updating remote status" true

  git remote update
  if [ $(git status  -uno | grep ahead | grep $branch_name | wc -l) -ge 1 ]; then
    msg "Pushing to remote" true
    git push || exit 1
  fi
}

function showhelp {
cat << HERE
Usage syncdt [OPTION]..
  -c Commit to current git branch
  -p Push to remote
  -a Add file to sync to the sync.files file
  -f Specify the file with the list of files and directories to be synced
  -t Specity the target directory
  -r Specify a prefix to remove from file path; default is $HOME
  -e Exclude file or directory
HERE
exit 0
}

function findandexec {
  for i in ${!funcs[@]}; do
  case ${funcs[$i]} in
    ${1}*)
      eval ${funcs[$i]}
      $2 && break
      ;;
  esac
  done
}

function inFile {
  [ ! -f $1 ] && return 1
  for line in $(cat $1); do
    eval line=$line
    [ ${line:0:1} != "#" -a $line = "$2" ] && return 0
  done
  return 1
}

function msg {
  $2 && echo
  echo -e "\033[34;1m--->  $1\033[0m"
}

function error {
  $2 && echo
  echo -e "\033[31;1m$1\033[0m"
}

function exclude {
  eval ex=$1
  exclude_list="${exclude_list}|$ex"
}

function add {
  inFile $sync_file $1 || echo $1 >> $sync_file
}

function setfile {
  sync_file=$1
}

function settarget {
  target=$1
}

function setroot {
  rootdir=$1
}

branch_name="$(git symbolic-ref HEAD 2>/dev/null)" || branch_name="(unnamed branch)"
branch_name=${branch_name##refs/heads/}

sync_file=sync.files
rootdir=$HOME
target=$PWD
cmd=none

for arg in $@; do
  if [ ${arg:0:1} != '-' ]; then
    funcs+=("$cmd $arg")
    continue
  fi
  case $arg in
    -c)
      funcs+=("commit")
      ;;
    -p)
      funcs+=("push")
      ;;
    -cp)
      funcs+=("commit")
      funcs+=("push")
      ;;
    -pc)
      funcs+=("commit")
      funcs+=("push")
      ;;
    -a)
      cmd=add
      ;;
    -f)
      cmd=setfile
      ;;
    -t)
      cmd=settarget
      ;;
    -e)
      cmd=exclude
      ;;
    -h)
      showhelp
      ;;
    --help)
      showhelp
      ;;
  esac
done

findandexec settarget true
findandexec setfile   true
findandexec add       false
findandexec exclude   false
eval sync
findandexec commit    true
findandexec push      true

msg Done! false && exit 0
